version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: mailportal_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-mailportal}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/src/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - mailportal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: mailportal_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-mailportal}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      DIRECTADMIN_URL: ${DIRECTADMIN_URL}
      DIRECTADMIN_USERNAME: ${DIRECTADMIN_USERNAME}
      DIRECTADMIN_PASSWORD: ${DIRECTADMIN_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mailportal_network

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: mailportal_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - mailportal_network

networks:
  mailportal_network:
    driver: bridge

volumes:
  postgres_data: