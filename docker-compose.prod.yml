version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      DIRECTADMIN_URL: ${DIRECTADMIN_URL}
      DIRECTADMIN_USERNAME: ${DIRECTADMIN_USERNAME}
      DIRECTADMIN_PASSWORD: ${DIRECTADMIN_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
      - coolify

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - internal
      - coolify
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.port=80"
      - "coolify.domain=${DOMAIN}"

networks:
  internal:
    driver: bridge
  coolify:
    external: true

volumes:
  postgres_data: